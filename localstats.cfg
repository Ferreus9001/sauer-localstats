// File:        localstats.cfg
// Author:      FerreusRemedium
// Created:     2013-03-13
// Last Change: 2013-09-29


// sound queue for combos
exec "queuesound.cfg"



// ==================
//  Helper Functions
// ==================



createine = [ if (=s (getalias $arg1) "") [ $arg1 = $arg2 ] ]


+= = [$arg1 = (+ (getalias $arg1) $arg2)]
-= = [$arg1 = (- (getalias $arg1) $arg2)]
++ = [$arg1 = (+ (getalias $arg1)     1)]
-- = [$arg1 = (- (getalias $arg1)     1)]

// Checks whether the gametype is neither insta nor effic.
_ls_m_normal = [ && [! (m_insta $arg1)] [! (m_efficiency $arg1)] ]

// Ensures 2 digits by prepending zeros.
_ls_zeros = [ concatword (loopconcatword i (- $arg2 (strlen $arg1)) [0]) $arg1 ]

// _ls_display_byindex <COUNTERS> <COUNTERNO>
_ls_display_byindex = [
	local disp
	disp = (at $arg1 $arg2)
	cond [_ls_f_isnumeric (_ls_getcounterflags (at $_ls_list_counters $arg2))] [
		|| [result $disp] [result $_ls_nostats_string]
	] [!=s $disp ""] [
		result $disp
	] [
		result $_ls_nostats_string
	]
]

// _ls_round <F>
// Rounds float F to int.
_ls_round = [
	if (>= $arg1 0) [
		+ (+f $arg1 0.5) 0
	] [
		+ (-f $arg1 0.5) 0
	]
]

// _ls_round2 <F> <MUL>
// Rounds float F to a number of places.
// F:     The number.
// MUL:   10 to the number of decimal places'th power. (e.g. 100 for 2 places)
_ls_round2 = [
	if (>= $arg1 0) [
		divf (+ (+f (*f $arg1 $arg2) 0.5) 0) $arg2
	] [
		divf (+ (-f (*f $arg1 $arg2) 0.5) 0) $arg2
	]
]

// _ls_getstrtimesub <SECONDS> <SUFFIX> <DIV> [<MOD>] [<N>]
// Returns ((SECONS / DIV) % MOD) and appends SUFFIX.
// If the number without MOD equals or is greater than DIV, it ensures N digits (default: 2).
// If the number is zero, it returns an empty string.
// If MOD is omitted or 0 it counts as a really big number.
_ls_getstrtimesub = [
	if (< $arg1 $arg3) [
		result ""
	] [
		if (!= $arg4 0) [
			if (>= $arg1 (* $arg3 $arg4)) [
				concatword (_ls_zeros (mod (div $arg1 $arg3) $arg4) (|| [result $arg5] [2])) $arg2
			] [
				concatword (mod (div $arg1 $arg3) $arg4) $arg2
			]
		] [
			concatword (div $arg1 $arg3) $arg2
		]
	]
]

// _ls_getstrtime <SECONDS>
// Returns a string-representation of a time.
// SECONDS: The time in seconds.
_ls_getstrtime = [
	concatword (_ls_getstrtimesub $arg1 "h" 3600) (_ls_getstrtimesub $arg1 "m" 60 60) (_ls_getstrtimesub $arg1 "s" 1 60)
]





// =======
//  Lists
// =======



_ls_flag_counter_static  = 0x1
_ls_flag_counter_add     = 0x4
_ls_flag_counter_numeric = 0x2
_ls_flag_counter_maximum = 0x8

// Normal counters
// Shall not be changed after exec
_ls_list_counters = [
	[0x6 _ls_getfrags     ]
	[0x6 getdeaths        ]
	[0x6 _ls_gettks       ]
	[0x6 _ls_getsuicides  ]
	[0x6 gettotaldamage   ]
	[0x6 gettotalshots    ]
	[0x6 getflags         ]
	[0x6 _ls_gettime      ]
	[0x6 _ls_getroundcount]
	[0x1 mapname          ]
	[0x3 getmode          ]
	[0xA _ls_getmaxstreak ]
	[0xA _ls_getmaxspree  ]
]

_ls_flag_showin_total   = 0x01
_ls_flag_showin_current = 0x02
_ls_flag_showin_history = 0x04
_ls_flag_showin_message = 0x08
_ls_flag_showin_gamehud = 0x10
_ls_mask_showin_any     = 0x1F

// Functions called to display the counters
_ls_list_displays = [
	[0x0C _ls_dispmode Mode:    ]
	[0x0C #9           Map:     ]
	[0x1F #0           Frags:   ]
	[0x1F #1           Deaths:  ]
	[0x1F #2           Tks:     ]
	[0x1F #3           Suicides:]
	[0x0F #4           Damage:  ]
	[0x0F #5           Shots:   ]
	[0x1F #6           Scores:  ]
	[0x1F _ls_disptime Time:    ]
	[0x01 #8           Games:   ]
	[0x1F _ls_dispacc  Acc:     ]
	[0x1F _ls_dispkpd  K/D:     ]
	[0x1F _ls_dispkpm  K/M:     ]
	[0x1F #11          Streak:  ]
	[0x1F #12          Spree:   ]
	[0x12 _ls_nowspree Now:     ]
]

// Gamemode filters
_ls_list_filters = [
	[. insta   m_insta       ]
	[. effic   m_efficiency  ]
	[. . .                   ]
	[. team    m_teammode    ]
	[. ctf     m_ctf         ]
	[. protect m_protect     ]
	[. hold    m_hold        ]
	[. collect m_collect     ]
	[. . .                   ]
	[. capture m_capture     ]
	[. regen   m_regencapture]
	[. tactics m_tactics     ]
	[. sp      m_sp          ]
	[. dmsp    m_dmsp        ]
]

// Included gamemodes
_ls_list_modes = [
	[-3 sp          ]
	[-2 dmsp        ]
	[0  ffa         ]
	// [1  coop        ]
	[2  teamplay    ]
	[3  instagib    ]
	[4  instateam   ]
	[5  effic       ]
	[6  efficteam   ]
	[7  tactics     ]
	[8  tacteam     ]
	[9  capture     ]
	[10 regen       ]
	[11 ctf         ]
	[12 instactf    ]
	[13 protect     ]
	[14 instaprotect]
	[15 hold        ]
	[16 instahold   ]
	[17 efficctf    ]
	[18 efficprotect]
	[19 effichold   ]
	[20 collect     ]
	[21 instacollect]
	[22 efficcollect]
]

_ls_list_deaths = [
	// [c "" "announcer/fail" 0 0 [= $_ls_current_lastspree 0]]
	[c "" "announcer/excellent" 1200 400 [>= $_ls_current_spree 10]]
]

_ls_list_streaks = [
	[2 "^f0<<< ^f6Double Kill%2 ^f0>>>"    "announcer/doublekill"    1500 200]
	[3 "^f0<<< ^f6Triple Kill%2 ^f0>>>"    "announcer/triplekill"    1500 250]
	[4 "^f0<<< ^f6Multi Kill%2 ^f0>>>"     "announcer/multikill"     2000 300]
	[5 "^f0<<< ^f6ULTRA KILL%2 ^f0>>>"     "announcer/ultrakill"     1700 370]
	[6 "^f0<<< ^f6LUDICROUS KILL%2 ^f0>>>" "announcer/ludicrouskill" 2500 500]
	[7 "^f0<<< ^f6MONSTER KILL%2 ^f0>>>"   "announcer/monsterkill"   2700 400]
	[n "^f0<<< ^f6%1 MULTIPLE KILLS%2 ^f0>>>" "" 0 0 [result $arg2]]
]
	// [5 "^f0<<< ^f6MEGA KILL%2 ^f0>>>"      "announcer/megakill"      2300 550]

_ls_list_sprees = [
	[5  "^f0[[[ ^f6Killing Spree%2 ^f0]]]" "announcer/killingspree" 2100 400]
	[10 "^f0[[[ ^f6Rampage%2 ^f0]]]"       "announcer/rampage"      2000 400]
	[15 "^f0[[[ ^f6Dominating%2 ^f0]]]"    "announcer/dominating"   1500 500]
	[20 "^f0[[[ ^f6UNSTOPPABLE%2 ^f0]]]"   "announcer/unstoppable"  2000 400]
	[30 "^f0[[[ ^f6GODLIKE%2 ^f0]]]"       "announcer/godlike"      1900 400]
	[n  "^f0[[[ ^f6%1 KILLS%2 ^f0]]]" "" 0 0 [
		local n
		n = (- $arg2 (mod $arg2 5))
		if (> $n $arg1) [
			result $n
		] [
			0
		]
	]]
]

_ls_list_times = [
	[1   "" "time/1sec"  -1 300]
	[2   "" "time/2sec"  -1 300]
	[3   "" "time/3sec"  -1 300]
	[4   "" "time/4sec"  -1 300]
	[5   "" "time/5sec"  -1 300]
	[6   "" "time/6sec"  -1 300]
	[7   "" "time/7sec"  -1 300]
	[8   "" "time/8sec"  -1 300]
	[9   "" "time/9sec"  -1 300]
	[10  "" "time/10sec" -1 300]
	[30  "" "time/30sec" -1 330]
	[60  "" "time/1min"  -1 300]
	[180 "" "time/3min"  -1 300]
	[300 "" "time/5min"  -1 300]
]

// teammodes:   ffa teamplay
// teamplay:    none ctf protect hold collect
// gearmodes:   none insta effic
// uniqueffa:   tactics
// uniqueteam:  tacteam capture regen

createine _ls_last_isconnected 0
createine _ls_last_mode -128
createine _ls_last_timeremaining 0
createine _ls_last_deaths 0
createine _ls_last_time -1

createine _ls_setting_save_current 1
createine _ls_setting_save_reactivate 1
createine _ls_setting_save_history_always 0
createine _ls_setting_combo_print 1
createine _ls_setting_combo_audible 0
createine _ls_setting_echo_postgame 1
createine _ls_setting_echo_postgame_delay 1000
createine _ls_setting_settings_advanced 0

// sound defaults to off, can't distribute soundfiles
createine _ls_setting_enable_sound 0

createine _ls_setting_tkpollinterval 20
createine _ls_setting_pollinterval 100
createine _ls_setting_history_max 50
createine _ls_setting_history_tabrows 25
createine _ls_setting_killstreak_timeout 2000

createine _ls_current_tks 0
createine _ls_current_suicides 0
createine _ls_current_fragpenalties 0
createine _ls_current_streak 0
createine _ls_current_spree 0
createine _ls_current_maxstreak 0
createine _ls_current_maxspree 0
createine _ls_current_lastfragtime 0
// createine _ls_current_lastspree 0
if (> $_ls_current_lastfragtime (getmillis)) [_ls_current_lastfragtime = 0]

createine _ls_filter_enabled 0

createine _ls_sound_enabled 0

// History vars
createine _ls_history_count 0

_ls_nostats_string = "-"

_ls_reset_all = [
	_ls_reset_history
	_ls_reset_current
	_ls_reset_stats
	_ls_reset_filters
	_ls_reset_settings
]

_ls_reset_current = [
	_ls_current_tks           = 0
	_ls_current_suicides      = 0
	_ls_current_fragpenalties = 0
	_ls_current_streak        = 0
	_ls_current_spree         = 0
	_ls_current_maxstreak     = 0
	_ls_current_maxspree      = 0
	_ls_current_lastfragtime  = 0
	// _ls_current_lastspree     = 0

	_ls_last_isconnected      = 0
	_ls_last_mode             = -128
	_ls_last_timeremaining    = 0
	_ls_last_deaths           = 0

	_ls_setstats START ""
	_ls_setstats END   ""
]

_ls_reset_filters = [
	loop i (listlen $_ls_list_filters) [
		(_ls_getfiltername $i 0) =
		(_ls_getfiltername $i 1) =
	]
]

// FIXME does not work correctly when in game TEST
_ls_reset_stats = [
	loop m $_ls_list_modes [
		_ls_setstats (at $m 0) ""
	]
	_ls_setstats LAST ""
]

_ls_reset_history = [
	_ls_checkhistorylimit 0
]

_ls_reset_settings = [
	_ls_setting_save_current = 1
	_ls_setting_save_reactivate = 1
	_ls_setting_save_history_always = 0
	_ls_setting_combo_print = 1
	_ls_setting_combo_audible = 1
	_ls_setting_echo_postgame = 1
	_ls_setting_echo_postgame_delay = 1000
	_ls_setting_settings_advanced = 0

	_ls_setting_tkpollinterval = 20
	_ls_setting_pollinterval = 100
	_ls_setting_history_max = 50
	_ls_setting_history_tabrows = 25
	_ls_setting_killstreak_timeout = 2000

	_ls_filter_enabled = 0

	_ls_checkhistorylimit
]




// ==============================
//  Teamkill and Suicide polling
// ==============================



// polls frags and deaths to count tks, suicides and combos
_ls_polltksd = [
	sleep $_ls_setting_tkpollinterval [
		local fcmp dcmp tcmp
		fcmp = (- (getfrags) @(getfrags))
		dcmp = (- (getdeaths) @(getdeaths))
		tcmp = (- (timeremaining) @(timeremaining))
		if (< $fcmp 0) [
			if (&& [>= $dcmp 0] [<= $tcmp 0]) [ // in case the game has ended
				local tks
				tks = (- 0 (+ $fcmp $dcmp))
				if (!= $tks 0) [
					_ls_onteamkill $tks
				]
				+= _ls_current_tks $tks
				+= _ls_current_suicides $dcmp
				-= _ls_current_fragpenalties $fcmp
			]
		] [
			if (> $fcmp 0) [
				if (&& [>= $dcmp 0] [<= $tcmp 0]) [ // in case the game has ended
					_ls_onkill $fcmp
				]
			]
		]
		if (!= $dcmp 0) [
			_ls_ondeath $dcmp
		]
		if (= $_ls_polltksd_starts @arg1) [
			_ls_polltksd @@arg1
		]
	]
]
createine _ls_polltksd_starts 0
_ls_polltksd_starts = (+ $_ls_polltksd_starts 1)
_ls_polltksd $_ls_polltksd_starts

// _ls_docomboout <ENTRY> <NUM> <!DIV>
_ls_docomboout = [
	local s snd
	if (&& [!= $_ls_setting_enable_sound 0] [!= $_ls_setting_combo_audible 0]) [
		snd = (at $arg1 2)
		if (!=s $snd "") [
			queueregsound $snd (at $arg1 4) (at $arg1 3)
		]
	]
	if (!= $_ls_setting_combo_print 0) [
		s = (at $arg1 1)
		if (!=s $s "") [
			echo (format (unescape $s) $arg2 (loopconcatword i (div $arg2 $arg3) [result !]))
		]
	]
]

// _ls_comboout <LIST> <OLDCOUNT> <COUNT> <!DIV>
//
// LIST: List of LISTELEM.
// LISTELEM:
//   [N TEXT SOUND LENGTH VOLUME COND]
//   N:      Number or a condition char.
//   TEXT:   Text to echo. "" for no echo.
//   SOUND:  Name of the sound. "" for no sound.
//   LENGTH: Length of the sound.
//   VOLUME: Volume of the sound.
//   COND:   Condition if N is "n" or "c".
//           If N is "n", COND is only checked if no
//           entry was found yet.
//           If N is "c", COND is always checked.
_ls_comboout = [
	local n e f num
	listfind i $arg1 [
		n = (at $i 0)
		cond [>= (strstr "nc" $n) 0] [
			if (|| [=s $e ""] [=s $n "c"]) [
				f = (at $i 5)
				num = (f $arg2 $arg3)
				if (!= $num 0) [
					e = $i
					1
				]
			]
		] [> $n $arg3] [
			1
		] [> $n $arg2] [
			num = $n
			e = $i
		]
	]
	_ls_docomboout $e $num $arg4
]

_ls_onteamkill = [
	if (&& [!= $_ls_setting_enable_sound 0] [!= $_ls_setting_combo_audible 0]) [
		queueregsound "free/acid5.wav" 200 700
	]
]

// _ls_onkill <COUNT>
_ls_onkill = [
	local oldspree oldstreak
	oldspree = $_ls_current_spree
	if (> (- (getmillis) $_ls_current_lastfragtime) $_ls_setting_killstreak_timeout) [
		oldstreak = 0
		_ls_current_streak = $arg1
	] [
		oldstreak = $_ls_current_streak
		+= _ls_current_streak $arg1
	]
	+= _ls_current_spree $arg1
	_ls_current_maxstreak = (max $_ls_current_maxstreak $_ls_current_streak)
	_ls_current_maxspree = (max $_ls_current_maxspree $_ls_current_spree)
	_ls_current_lastfragtime = (getmillis)

	_ls_comboout $_ls_list_streaks $oldstreak $_ls_current_streak 1
	_ls_comboout $_ls_list_sprees  $oldspree  $_ls_current_spree  5
]

_ls_ondeath = [
	_ls_comboout $_ls_list_deaths 0 1 1
	_ls_current_spree = 0
]

_ls_timecheck = [
	local time
	time = (timeremaining)
	if (!= $time $_ls_last_time) [
		_ls_comboout $_ls_list_times $time (+ $time 1) 0
		_ls_last_time =  $time
	]
]




// =======
//  Flags
// =======



// _ls_getcounterflags <COUNTER>
_ls_getcounterflags = [
	|| [at $arg1 0] [0]
]

// _ls_f_isnumeric <FLAGS>
_ls_f_isnumeric = [
	& $arg1 $_ls_flag_counter_numeric
]

// _ls_f_isstatic <FLAGS>
_ls_f_isstatic = [
	& $arg1 $_ls_flag_counter_static
]

// _ls_f_isaddcounter <FLAGS>
_ls_f_isaddcounter = [
	& $arg1 $_ls_flag_counter_add
]

_ls_f_ismaxcounter = [
	& $arg1 $_ls_flag_counter_maximum
]





// ================
//  Stats counting
// ================



// _ls_findcounter <GETTER>
// Returns a counter index by getter.
_ls_findcounter = [
	listfind i $_ls_list_counters [=s (at $i 1) $arg1]
]

_ls_numcounters = [
	listlen $_ls_list_counters
]

// _ls_opcounters <OP> <LIST1> <LIST2>
_ls_opcounters = [
	local list i
	i = 0
	looplist c $_ls_list_counters [
		list = (concat $list ($arg1 (at $arg2 $i) (at $arg3 $i) (_ls_getcounterflags $c)))
		i = (+ $i 1)
	]
	result $list
]

_ls_opcounters_op = [
	// if (getalias _ls_DEBUG) [echo _ls_opcounters_op | $arg1 | $arg2 | $arg3 |]
	cond [_ls_f_isaddcounter $arg3] [
		$op $arg1 $arg2
	] [_ls_f_ismaxcounter $arg3] [
		max $arg1 $arg2
	] [
		|| [result $arg1] [result $arg2]
	]
]

// _ls_applycounters <LIST1> <LIST2>
_ls_applycounters = [
	local op
	op = +
	_ls_opcounters _ls_opcounters_op $arg1 $arg2
]

// _ls_diffcounters <LIST1> <LIST2>
_ls_diffcounters = [
	local op
	op = -
	_ls_opcounters _ls_opcounters_op $arg1 $arg2
]





// =========
//   Stats
// =========



// _ls_getstatsname <TAG>
_ls_getstatsname = [
	concatword _ls_stats_ $arg1
]

// _ls_setstats <TAG> <COUNTERS>
_ls_setstats = [
	(_ls_getstatsname $arg1) = $arg2
]

// _ls_applystats <TAG> <COUNTERS>
_ls_applystats = [
	(_ls_getstatsname $arg1) = (_ls_applycounters $arg2 (_ls_getstats $arg1))
]

// _ls_getstats
_ls_getstats = [
	getalias (_ls_getstatsname $arg1)
]

// _ls_getstats_current
_ls_getstats_current = [
	_ls_diffcounters (_ls_getstats END) (_ls_getstats START)
]

// _ls_getcurrentcounter <COUNTER>
_ls_getcurrentcounter = [
	local val
	val = ((at $arg1 1))
	cond [_ls_f_isnumeric (_ls_getcounterflags $arg1)] [
		|| [result $val] [0]
	] [!=s $val ""] [
		result $val
	] [
		result $_ls_nostats_string
	]
]

// _ls_getcurrentcounters
_ls_getcurrentcounters = [
	local s
	looplist c $_ls_list_counters [
		s = (concat $s (_ls_getcurrentcounter $c))
	]
	result $s
]

// _ls_apply_tmp <TAG>
// saves current game stats to temporary vars
// TAG: END or START
_ls_apply_tmp = [
	local _ls_setstats_tmp_tag
	_ls_setstats_tmp_tag = $arg1
	(_ls_getstatsname $arg1) = (_ls_getcurrentcounters)
]




// ==========
//  Displays
// ==========



// _ls_getdisplayflags <DISPLAY>
_ls_getdisplayflags = [
	// at $_ls_list_displays_flags $arg1
	at $arg1 0
]

// _ls_getdisplaygetter <DISPLAY>
_ls_getdisplaygetter = [
	at $arg1 1
]

// _ls_getdisplaytitle <DISPLAY>
_ls_getdisplaytitle = [
	at $arg1 2
]

// _ls_getdisplaycount <FLAGS>
_ls_getdisplaycount = [
	local count
	// loop i (listlen $_ls_list_displays) [
		// if (& (_ls_getdisplayflags $i) $arg1) [
	looplist d $_ls_list_displays [
		if (& (_ls_getdisplayflags $d) $arg1) [
			count = (+ $count 1)
		]
	]
	result $count
]

// _ls_loopdisplays <VARCAPTION> <VARDISP> <COUNTERS> <MASK> <ACTION>
_ls_loopdisplays = [
	local $arg1 $arg2 .
	// reserve #n function names
	local @(loopconcat i (_ls_numcounters) [result [#@i]])

	// _ls_getdisplayvalue <DISPLAY> <LIST>
	_ls_getdisplayvalue = [
		(_ls_getdisplaygetter $arg1) $arg2
	]

	// Getters:
	// getter <COUNTERS>

	if (< $numargs 5) [
		arg5 = $arg4
		arg4 = $_ls_mask_showin_any
	]

	// create #n display functions
	loop i @(_ls_numcounters) [
		// _ls_display_byindex <COUNTERS> <COUNTERNO>
		[#@i] = [_ls_display_byindex $arg1 @i]
	]
	// loopconcatword d (listlen $_ls_list_displays) [
	looplist d $_ls_list_displays [
		if (& (_ls_getdisplayflags $d) $arg4) [
			$arg1 = (_ls_getdisplaytitle $d)
			$arg2 = (_ls_getdisplayvalue $d $arg3)
			arg5
		]
	]
]





// =========
//  History
// =========



_ls_gethistory = [ getalias _ls_history ]
_ls_gethistorylength = [ listlen (_ls_gethistory) ]

// _ls_addhistory <COUNTERS>
_ls_addhistory = [
	_ls_history = (sublist (concat [[@@arg1]] (_ls_gethistory)) 0 $_ls_setting_history_max)
]

// _ls_rmhistory <ENTRY>
_ls_rmhistory = [
	_ls_history = (listsplice (_ls_gethistory) "" $arg1 1)
]

// _ls_checkhistorylimit [<LIMIT>]
// Deletes history entries exceeding the history limit.
// Default: $_ls_setting_history_max
_ls_checkhistorylimit = [
	if (< $numargs 1) [
		arg1 = $_ls_setting_history_max
	]
	_ls_history = (sublist (_ls_gethistory) 0 $arg1)
]





// ===============
//  Stats polling
// ===============



// _ls_ismodecounted <MODE>
_ls_ismodecounted = [
	>= (listfind item $_ls_list_modes [= $arg1 (at $item 0)]) 0
]

// _ls_apply
// Adds temporary counters to permanent counters
_ls_apply = [
	local addit counters
	addit = (_ls_ismodecounted $_ls_last_mode)
	if (!= $addit 0) [
		counters = (_ls_getstats_current)
		_ls_setstats LAST $counters
		if (!= $_ls_setting_save_current 0) [
			_ls_applystats $_ls_last_mode $counters
		]
		if (|| [!= $_ls_setting_save_current 0] [!= $_ls_setting_save_history_always 0]) [
			_ls_addhistory $counters
		]
		1
	] [
		0
	]
]

// _ls_getgamestate
// checks whether the last game has ended
// FIXME
// Does not work correctly if the game is changed when all are true:
//  1. The game is switched directly without leaving the game to the main menu
//  2. The time remaining in the new game is less than in the old game
//  3. The player did not have any deaths in the old game
//  4. The new game is on the same mode as the old game
_ls_status_gamestarted = 0x1
_ls_status_gameended = 0x2
createine _ls_state_waiting1second 0
_ls_getgamestate = [
	local status
	status = 0
	cond [m_demo (getmode)] [
		status = (| $status $_ls_status_gameended)
	] [|| [!= (isconnected) $_ls_last_isconnected] [> (timeremaining) $_ls_last_timeremaining] [< (getdeaths) $_ls_last_deaths] [!= (getmode) $_ls_last_mode]] [
		status = (| $status $_ls_status_gamestarted)
		status = (| $status $_ls_status_gameended)
		_ls_state_waiting1second = 0
	] [&& [<= (timeremaining) 0] [! (m_edit (getmode))] [isconnected]] [
		case $_ls_state_waiting1second 0 [
			_ls_state_waiting1second = 1
			sleep 1000 [
				if (= $_ls_state_waiting1second 1) [
					_ls_state_waiting1second = 2
				]
			]
		] 2 [
			status = (| $status $_ls_status_gameended)
		]
	] [
		_ls_state_waiting1second = 0
	]
	result $status
]

// _ls_savegameinfo
// saves information about current game for _ls_changedgame
_ls_savegameinfo = [
	_ls_last_mode = (getmode)
	_ls_last_isconnected = (isconnected)
	_ls_last_timeremaining = (timeremaining)
	_ls_last_deaths = (getdeaths)
]

// _ls_ongameended
// Called after a game has ended.
_ls_ongameended = [
	local applied
	applied = (_ls_apply)
	if (&& [result $applied] [result $_ls_setting_echo_postgame]) [
		sleep (? (&& [isconnected] [= (timeremaining) 0]) $_ls_setting_echo_postgame_delay 0) [
			local s
			echo (concatword "^f0Stats of last game:" (
				_ls_loopdisplays caption disp (_ls_getstats LAST) $_ls_flag_showin_message [
					if (!=s $disp $_ls_nostats_string) [
						s = (concatword $s " " $caption " ^fs^f6" $disp "^fr")
					]
				]
				result $s
			))
		]
	]

	_ls_current_tks = 0
	_ls_current_suicides = 0
	_ls_current_fragpenalties = 0
	_ls_current_streak = 0
	_ls_current_spree = 0
	_ls_current_maxstreak = 0
	_ls_current_maxspree = 0
	_ls_current_lastfragtime = 0

	// user hook
	if (!=s (getalias ongameended) "") [
		sleep 1 [ongameended @applied]
	]
	if (!= $_ls_setting_save_reactivate 0) [
		_ls_setting_save_current = 1
	]
	_ls_updategui
]

_ls_ongamestarted = [
	// user hook
	if (!=s (getalias ongamestarted) "") [
		sleep 1 [ongamestarted]
	]
	_ls_apply_tmp START
	_ls_updategui_total
]

// _ls_statscheck
_ls_statscheck = [
	_ls_timecheck
	_ls_savegameinfo
	if (!= $_ls_last_status $_ls_status_gameended) [
		_ls_apply_tmp END
	]
]

createine _ls_last_status 0

// _ls_pollstatsd
_ls_pollstatsd = [
	sleep $_ls_setting_pollinterval [
		local status
		status = (_ls_getgamestate)
		if (!= $status $_ls_last_status) [
			if (&& [& $status $_ls_status_gameended] [! (& $_ls_last_status $_ls_status_gameended)]) [
				_ls_ongameended
			]
			if (&& [& $status $_ls_status_gamestarted] [! (& $_ls_last_status $_ls_status_gamestarted)]) [
				_ls_ongamestarted
			]
			_ls_last_status = $status
		]
		_ls_statscheck

		if (= $_ls_pollstatsd_starts @arg1) [
			_ls_pollstatsd @@arg1
		]
	]
]
createine _ls_pollstatsd_starts 0
_ls_pollstatsd_starts = (+ $_ls_pollstatsd_starts 1)
_ls_pollstatsd $_ls_pollstatsd_starts





// =================
//  Special getters
// =================


_ls_getfrags = [ + (getfrags) $_ls_current_fragpenalties ]

// Returns tks counted by _ls_polltksd
_ls_gettks = [ result $_ls_current_tks ]

// Returns suicides counted by _ls_polltksd
_ls_getsuicides = [ result $_ls_current_suicides ]

_ls_getmaxstreak = [ result $_ls_current_maxstreak ]

_ls_getspree = [ result $_ls_current_spree ]

_ls_getmaxspree = [ result $_ls_current_maxspree ]

// _ls_gettime
// Returns time in seconds
_ls_gettime = [ - 0 (timeremaining) ]

_ls_fixroundcount = [
	if (= $arg2 @(_ls_findcounter "_ls_getroundcount")) [
		0
	] [
		at $arg1 $arg2
	]
]

// _ls_getroundcount
// Returns whether the game has been longer than 60 seconds.
_ls_getroundcount = [
	if (=s (getalias _ls_setstats_tmp_tag) START) [
		// check does not work when START is applied
		0
	] [
		>= (at (_ls_getstats_current) @@(_ls_findcounter "_ls_gettime")) 60
	]
]





// ===================
//  Display Functions
// ===================



// _ls_disptime <COUNTERS>
// Returns the game time as a string.
_ls_disptime = [
	local time
	time = (at $arg1 @(_ls_findcounter "_ls_gettime"))
	if (> $time 0) [
		_ls_getstrtime $time
	] [
		result $_ls_nostats_string
	]
]

// _ls_dispacc <COUNTERS>
// Returns accuracy.
_ls_dispacc = [
	local damage shots
	damage = (at $arg1 @(_ls_findcounter "gettotaldamage"))
	shots = (at $arg1 @(_ls_findcounter "gettotalshots"))
	if (!= $damage 0) [
		concatword (_ls_round2 (*f (divf $damage $shots) 100) 10) "%"
	] [
		result $_ls_nostats_string
	]
]

// _ls_dispkpd <COUNTERS>
// Returns frags per death.
_ls_dispkpd = [
	local frags deaths
	frags = (at $arg1 @(_ls_findcounter "getfrags"))
	deaths = (at $arg1 @(_ls_findcounter "getdeaths"))
	if (!= $frags 0) [
		_ls_round2 (divf $frags (max $deaths 1)) 100
	] [
		result $_ls_nostats_string
	]
]

// _ls_dispkpm <COUNTERS>
// Returns frags per minute.
_ls_dispkpm = [
	local frags minutes
	frags = (at $arg1 @(_ls_findcounter "getfrags"))
	minutes = (divf (at $arg1 @(_ls_findcounter "_ls_gettime")) 60)
	if (&& [result $frags] [result $minutes]) [
		_ls_round2 (divf $frags (maxf $minutes 0.01)) 100
	] [
		result $_ls_nostats_string
	]
]

// _ls_dispmode <COUNTERS>
_ls_dispmode = [
	local i found
	found = $_ls_nostats_string
	listfind item $_ls_list_modes [
		if (= (at $item 0) @(at $arg1 @@(_ls_findcounter "getmode"))) [
			found = (at $item 1)
			1
		]
	]
	result $found
]

_ls_nowspree = [
	if (!= $_ls_current_spree 0) [result $_ls_current_spree] [result -]
]




// ===========
//  GUI stuff
// ===========



// _ls_getfiltername <FILTER> <ONOFF>
// ONOFF: 0 for the "on" variable, 1 for the true/false variable.
_ls_getfiltername = [
	concatword _ls_filter_ $arg1 _ $arg2
]

// _ls_genfilter <INDEX> <FILTER>
// Adds filter controls to the gui.
_ls_genfilter = [
	local ctrls falsetext truetext
	falsetext = (at $arg2 0)
	truetext = (at $arg2 1)

	ctrls = [guicheckbox "on" [@@(_ls_getfiltername $arg1 0)] 1 0 [_ls_updategui_total]]
	case (+ (!=s $truetext ".") (!=s $falsetext ".")) 2 [
		createine (_ls_getfiltername $arg1 0) 0
		createine (_ls_getfiltername $arg1 1) 1
		ctrls = (concat $ctrls [
			guistrut 2
			guiradio [@@falsetext] [@@(_ls_getfiltername $arg1 1)] 0 [
				(_ls_getfiltername [@@@arg1] 0) = 1
				_ls_updategui_total
			]
			guistrut 2
			guiradio [@@truetext] [@@(_ls_getfiltername $arg1 1)] 1 [
				(_ls_getfiltername [@@@arg1] 0) = 1
				_ls_updategui_total
			]
		])
		result [guilist [@@ctrls];]
	] 1 [
		createine (_ls_getfiltername $arg1 0) 0
		if (!=s $falsetext ".") [
			createine (_ls_getfiltername $arg1 1) 1
			ctrls = (concat $ctrls [
				guistrut 2
				guicheckbox [@@falsetext] [@@(_ls_getfiltername $arg1 1)] 0 1 [
					(_ls_getfiltername [@@@arg1] 0) = 1
					_ls_updategui_total
				]
			])
		] [
			createine (_ls_getfiltername $arg1 1) 0
			ctrls = (concat $ctrls [
				guistrut 2
				guicheckbox [@@truetext] [@@(_ls_getfiltername $arg1 1)] 1 0 [
					(_ls_getfiltername [@@@arg1] 0) = 1
					_ls_updategui_total
				]
			])
		]
		result [guilist [@@ctrls];]
	] 0 [
		(_ls_getfiltername $arg1 0) =
		(_ls_getfiltername $arg1 1) =
		result [guibar;]
	]
]

// _ls_genfilterelems
// Adds controls for all filters to the gui.
_ls_genfilterelems = [
	local ctrls i
	i = 0
	looplist c $_ls_list_filters [
		ctrls = (concat $ctrls (_ls_genfilter $i $c))
		i = (+ $i 1)
	]
	concat $ctrls [guibar; guibutton "Reset filters" [_ls_reset_filters; _ls_updategui_total]]
]

// _ls_checkfilter <MODE>
_ls_checkfilter = [
	|| [= $_ls_filter_enabled 0] [
		local useit i
		useit = 1
		i = 0
		looplist f $_ls_list_filters [
			if (!= $useit 0) [
				if (getalias (_ls_getfiltername $i 0)) [
					useit = (= $(_ls_getfiltername $i 1) ((at $f 2) $arg1))
				]
			]
			i = (+ $i 1)
		]
		result $useit
	]
]

// _ls_checkfilter2 <MODE>
_ls_checkfilter2 = [
	|| [= $_ls_filter_enabled 0] [
		local i
		i = 0
		< (listfind f $_ls_list_filters [
			if (getalias (_ls_getfiltername $i 0)) [
				!= $(_ls_getfiltername $i 1) ((at $f 2) $arg1)
			]
			i = (+ $i 1)
		]) 0
	]
]

// _ls_gettotalfiltered
// Returns total counters filtered by gui controls.
_ls_gettotalfiltered = [
	local total
	looplist m $_ls_list_modes [
		if (_ls_checkfilter (at $m 0)) [
			total = (_ls_applycounters $total (_ls_getstats (at $m 0)))
		]
	]
	result $total
]

// _ls_genstatselems <COUNTERS> <FLAGS>
// Returns gui elements for all counters.
_ls_genstatselems = [
	local ctrls
	_ls_loopdisplays caption disp $arg1 $arg2 [
		ctrls = (concat $ctrls [guilist [
			guitext [@@@caption] 0
			guispring
			guitext [@@@disp] 0
		];])
	]
	result $ctrls
]


// Current stats gui
newgui _ls_current [
	_ls_loopdisplays caption disp (_ls_getstats_current) $_ls_flag_showin_current [
		guilist [
			guitext $caption 0
			guispring
			guitext $disp 0
		]
	]
	guistrut 1
	guicheckbox "Save current game" _ls_setting_save_current 1 0 [_ls_updategui_total]
	guibutton "Back" [cleargui 1] "arrow_bw"
] "Current game stats"

// _ls_genintsetting <TEXT> <AFTER> <WIDTH> <VAR> <DEFAULT> <MIN>
_ls_genintsetting = [
	result [
		guilist [
			guitext [@@@arg1]
			guistrut 1
			guifield [@@@arg4] [@@@arg3] [@@@arg4 = (? (>= $[@@@@arg4] [@@@@arg6]) $[@@@@arg4] [@@@@arg5])]
			guistrut 1
			guitext [@@@arg2] 0
		]
	]
]

_ls_doguireset = [
	cases $arg1 "history" [
		_ls_reset_history
	] "stats" [
		_ls_reset_stats
	] "settings" [
		_ls_reset_settings
	] "full" [
		_ls_reset_all
	]
	_ls_updategui
]

newgui _ls_reset_usure [
	guistayopen [
		guitext "Are you sure?"
		guistrut 0.5
		guibutton "Yes" [_ls_doguireset $_ls_gui_currentreset; _ls_gui_currentreset =; cleargui 2]
		guibutton "No"  [_ls_gui_currentreset =; cleargui 2]
	]
] "Reset"

newgui _ls_reset [
	guistayopen [
		guibutton "History" [_ls_gui_currentreset = "history"; showgui _ls_reset_usure]
		guibutton "Stats" [_ls_gui_currentreset = "stats"; showgui _ls_reset_usure]
		guibutton "Settings" [_ls_gui_currentreset = "settings"; showgui _ls_reset_usure]
		guibutton "Everything" [_ls_gui_currentreset = "full"; showgui _ls_reset_usure]
		guistrut 0.5
		guibutton "Back" [cleargui 1] "arrow_bw"
	]
] "Reset" [_ls_gui_currentreset =]

newgui _ls_settings [
	guistayopen [
		guinoautotab [
			guicheckbox "Reactivate stats saving after game" _ls_setting_save_reactivate
			guicheckbox "Always save history" _ls_setting_save_history_always
			guicheckbox "Print killstreaks" _ls_setting_combo_print
			if (!= $_ls_setting_enable_sound 0) [
				guicheckbox "Audible killstreaks" _ls_setting_combo_audible
			]
			guicheckbox "Print stats after game" _ls_setting_echo_postgame
			guistrut 0.5
			guibutton "Reset..." [showgui _ls_reset]
			guistrut 0.5
			guicheckbox "Advanced" _ls_setting_settings_advanced
			if (!= $_ls_setting_settings_advanced 0) [
				guibar
				@@@(_ls_genintsetting (tabify "TK poll interval:"            6) "ms"      4 _ls_setting_tkpollinterval        20 1)
				@@@(_ls_genintsetting (tabify "Stats poll interval:"         6) "ms"      4 _ls_setting_pollinterval         100 1)
				@@@(_ls_genintsetting (tabify "History limit:"               6) "entries" 4 _ls_setting_history_max           50 1)
				@@@(_ls_genintsetting (tabify "History rows/tab:"            6) "rows"    4 _ls_setting_history_tabrows       25 1)
				@@@(_ls_genintsetting (tabify "Killstreak timeout:"          6) "ms"      4 _ls_setting_killstreak_timeout  2000 1)
				@@@(_ls_genintsetting (tabify "Delay stats in intermission:" 6) "ms"      4 _ls_setting_echo_postgame_delay 1000 0)
				guibar
			]
			guistrut 0.5
			guibutton "Back" [cleargui 1] "arrow_bw"
		]
	]
] "Local Stats Settings" [_ls_gui_currentreset =]

// _ls_genhistoryelements
// Creates controls showing the history.
_ls_genhistoryelements = [
	if (<= (_ls_gethistorylength) 0) [
		result [guistrut 1; guistrut 70 1; guititle "There are no games yet."; guistrut 1.5]
	] [
		local i col row tab ctrls addtab colcount
		colcount = (+ 1 (_ls_getdisplaycount $_ls_flag_showin_history))
		do [
			local @(loopconcat d $colcount [concatword col $d])
			addtab = [
				ctrls = (concatword $ctrls (? (> $tab 1) [guitab @tab;]) [guilist [
					@@(loopconcatword col $colcount [
						result [guispring; guilist [@@(result $[col@col])];]
					])
				];])
				row = 0
				tab = (+ $tab 1)
			]

			row = 0
			tab = 1
			i = 0
			looplist entry (_ls_gethistory) [
				if (>= $row $_ls_setting_history_tabrows) [
					addtab
				]
				col = 0
				_ls_loopdisplays caption disp $entry $_ls_flag_showin_history [
					if (= $row 0) [
						[col@col] = [guilist [guispring; guistrut 1; guitext [@@@(concatword "^f0" $caption)] 0];]
					]
					[col@col] = (concatword $[col@col] [guilist [guispring; guistrut 1; guitext [@@@(concatword "^f6" $disp)] 0];])
					col = (+ $col 1)
				]
				if (= $row 0) [
					[col@col] = [guispring; guistrut 1;]
				]
				[col@col] = (concatword $[col@col] [guilist [guispring; guistrut 1; guibutton "" [_ls_rmhistory @@@i; _ls_updategui_history] "exit"];])
				row = (+ $row 1)
				i = (+ $i 1)
			]
			addtab
			result $ctrls
		]
	]
]

_ls_creategui_history = [
	result [guistayopen [
		@@(_ls_genhistoryelements)
	]]
]

// _ls_updategui_history
// Recreates the history gui.
_ls_updategui_history = [
	newgui _ls_history (_ls_creategui_history) "History"
]
_ls_updategui_history

// _ls_gentotalgui
// Creates the gui and returns the body.
_ls_gentotalgui = [
	result [guistayopen [
		guilist [
			@@@(if (!= $_ls_filter_enabled 0) [
				result [
					guilist [
						@@(_ls_genfilterelems)
					]
					guibar
				]
			])
			guilist [
				@@@@(_ls_genstatselems (_ls_gettotalfiltered) $_ls_flag_showin_total)
				guistrut 0.5
				guicheckbox "Filter" _ls_filter_enabled 1 0 [_ls_updategui_total]
				guicheckbox "Save current game" _ls_setting_save_current 1 0 [_ls_updategui_total]
				guistrut 0.5
				guibutton "Current game stats" [showgui _ls_current]
				guibutton "Game history"       [showgui _ls_history]
				guibutton "Settings"           [showgui _ls_settings]
			]
		]
	]]
]

// _ls_updategui_total
// Recreates the total gui.
_ls_updategui_total = [
	newgui _ls_filtered (_ls_gentotalgui) "Local Stats"
]
_ls_updategui_total

// _ls_updategui
// Updates all guis.
_ls_updategui = [
	_ls_updategui_total
	_ls_updategui_history
]





// ================
//  User functions
// ================



// savestatsreactivate 0/1
// Sets and returns whether savestats should be set to 1 after this game
savestatsreactivate = [
	if (> $numargs 0) [
		_ls_setting_save_reactivate = (!= $arg1 0)
	]
	result $_ls_setting_save_reactivate
]

// savestats 0/1
// Sets and returns whether the stats of the current game should be saved.
savestats = [
	if (&& [> $numargs 0] [!= (!= $arg1 0) $_ls_setting_save_current]) [
		_ls_setting_save_current = (!= $arg1 0)
		_ls_updategui_total
	]
	result $_ls_setting_save_current
]

// maxgamehistory <MAX>
// sets the maximum number of entries in the game history.
// NOTE: deletes old entries exceeding this limit.
maxgamehistory = [
	if (> $numargs 0) [
		_ls_setting_history_max = (max $arg1 0)
		_ls_checkhistorylimit
	]
	result $_ls_setting_history_max
]

// Updates and shows the total stats gui.
localstats = [ _ls_updategui_total; showgui _ls_filtered ]
// Updates and shows the history gui.
localstatshistory = [ _ls_updategui_history; showgui _ls_history ]
// Shows the current game stats gui.
localstatscurrent = [ showgui _ls_current ]





// =========
//  The end
// =========



// vim:set sw=4 ts=4 sts=0 noet sta sr ft=cube fdm=syntax:
